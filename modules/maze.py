mazes = dict()
mazes[((1,5),(6, 4))] = [
    ['#','#','#','#','#','#','#','#','#','#','#','#','#'],
    ['#','.','.','.','.','.','#','.','.','.','.','.','#'],
    ['#','.','#','#','#','.','#','.','#','#','#','#','#'],
    ['#','.','#','.','.','.','#','.','.','.','.','.','#'],
    ['#','.','#','.','#','#','#','#','#','#','#','.','#'],
    ['#','.','#','.','.','.','#','.','.','.','.','.','#'],
    ['#','.','#','#','#','.','#','.','#','#','#','.','#'],
    ['#','.','#','.','.','.','.','.','#','.','.','.','#'],
    ['#','.','#','#','#','#','#','#','#','#','#','.','#'],
    ['#','.','.','.','.','.','#','.','.','.','#','.','#'],
    ['#','.','.','#','#','.','#','.','#','#','#','.','#'],
    ['#','.','.','.','#','.','.','.','#','.','.','.','#'],
    ['#','#','#','#','#','#','#','#','#','#','#','#','#']
]
mazes[((6, 4), (1,5))] = [
    ['#','#','#','#','#','#','#','#','#','#','#','#','#'],
    ['#','.','.','.','.','.','#','.','.','.','.','.','#'],
    ['#','.','#','#','#','.','#','.','#','#','#','#','#'],
    ['#','.','#','.','.','.','#','.','.','.','.','.','#'],
    ['#','.','#','.','#','#','#','#','#','#','#','.','#'],
    ['#','.','#','.','.','.','#','.','.','.','.','.','#'],
    ['#','.','#','#','#','.','#','.','#','#','#','.','#'],
    ['#','.','#','.','.','.','.','.','#','.','.','.','#'],
    ['#','.','#','#','#','#','#','#','#','#','#','.','#'],
    ['#','.','.','.','.','.','#','.','.','.','#','.','#'],
    ['#','.','.','#','#','.','#','.','#','#','#','.','#'],
    ['#','.','.','.','#','.','.','.','#','.','.','.','#'],
    ['#','#','#','#','#','#','#','#','#','#','#','#','#']
]
mazes[((2, 3), (5, 5))] = [
    ['#','#','#','#','#','#','#','#','#','#','#','#','#'],
    ['#','.','.','.','.','.','#','.','.','.','.','.','#'],
    ['#','#','#','.','#','#','#','.','#','.','#','#','#'],
    ['#','.','.','.','#','.','.','.','#','.','.','.','#'],
    ['#','.','#','#','#','.','#','#','#','#','#','.','#'],
    ['#','.','#','.','.','.','#','.','.','.','.','.','#'],
    ['#','.','.','#','#','.','.','.','#','#','#','.','#'],
    ['#','.','#','.','.','.','.','.','#','.','.','.','#'],
    ['#','.','#','#','#','#','#','#','#','#','#','.','#'],
    ['#','.','.','.','.','.','#','.','.','.','#','.','#'],
    ['#','.','.','#','#','.','#','.','#','#','#','.','#'],
    ['#','.','.','.','#','.','.','.','#','.','.','.','#'],
    ['#','#','#','#','#','#','#','#','#','#','#','#','#']
]

m = []
key = ((1,5),(6,4))
maze = mazes[key]

def make_step(k):
    for i in range(len(m)):
        for j in range(len(m[i])):
            if m[i][j] == k:
                if i > 0 and m[i-1][j] == 0 and maze[i-1][j] == '.':
                    m[i-1][j] = k + 1
                if j > 0 and m[i][j-1] == 0 and maze[i][j-1] == '.':
                    m[i][j-1] = k + 1
                if i < len(m) - 1 and m[i+1][j] == 0 and maze[i+1][j] == '.':
                    m[i+1][j] = k + 1
                if j < len(m[i]) -1 and m[i][j+1] == 0 and maze[i][j+1] == '.':
                    m[i][j+1] = k + 1

def solve_maze():
    print("MAZE MODULE - START")
    print("First let's determine which maze you're using.")
    print("When entering coordinates, the lower left is '1, 1' and the upper right is '6, 6'.")
    #Get the info from the user and determine the maze to use.
    # ind1_str = input("First indicator? \n")

    startX = 1
    startY = 1
    endX = 11
    endY = 11

    print("Building Maze")
    #Create an empty maze of 0's for the path finder
    for y in range(len(maze)):
        m.append([])
        for x in range(len(maze[y])):
            m[-1].append(0)
    m[startX][startY] = 1

    print("Finding Path")
    #Determine number of steps away to get to ending.
    k = 0
    while m[endX][endY] == 0:
        k += 1
        make_step(k)

    print("Tracing Path")
    #List out the user must take.
    k = m[endX][endY]
    i = endX
    j = endY
    path = [(i, j)]
    while k > 1:
        if i > 0 and m[i-1][j] == k - 1:
            i = i - 1
        elif j > 0 and m[i][j-1] == k - 1:
            j = j - 1
        elif i < len(m) - 1 and m[i+1][j] == k - 1:
            i = i + 1
        elif j < len(m[i]) - 1 and m[i][j+1] == k - 1:
            j = j + 1
        path.insert(0, (i, j))
        k -= 1

    print("Steps are:")
    ind = 2
    cur = (startX, startY)
    last = (startX, startY)
    while ind < len(path):
        cur = path[ind]
        if (cur[1] > last[1]):
            print("RIGHT")
        elif (cur[1] < last[1]):
            print("LEFT")
        elif (cur[0] > last[0]):
            print("DOWN")
        elif (cur[0] < last[0]):
            print("UP")
        ind += 2
        last = cur

    while 1:
        success = input("Did you make it? y/n\n")
        if success != "y" and success != "n":
            print("Invalid entry. Please enter y or n")
            continue
        elif success == "y":
            print("HOORAY")
            print("MAZE MODULE - END")
            return
        elif success == "n":
            print("Uh oh...")
            print("Restarting...")
            solve_maze()

solve_maze()




