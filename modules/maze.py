mazes = dict()
mazes[((1,5),(6, 4))] = [
    ['#','#','#','#','#','#','#','#','#','#','#','#','#'],
    ['#','.','.','.','.','.','#','.','.','.','.','.','#'],
    ['#','.','#','#','#','.','#','.','#','#','#','#','#'],
    ['#','.','#','.','.','.','#','.','.','.','.','.','#'],
    ['#','.','#','.','#','#','#','#','#','#','#','.','#'],
    ['#','.','#','.','.','.','#','.','.','.','.','.','#'],
    ['#','.','#','#','#','.','.','.','#','#','#','.','#'],
    ['#','.','#','.','.','.','.','.','#','.','.','.','#'],
    ['#','.','#','#','#','#','#','#','#','#','#','.','#'],
    ['#','.','.','.','.','.','#','.','.','.','#','.','#'],
    ['#','.','.','#','#','.','#','.','#','#','#','.','#'],
    ['#','.','.','.','#','.','.','.','#','.','.','.','#'],
    ['#','#','#','#','#','#','#','#','#','#','#','#','#']
]

m = []
key = ((1,5),(6,4))
maze = mazes[key]

def make_step(k):
    for i in range(len(m)):
        for j in range(len(m[i])):
            if m[i][j] == k:
                if i > 0 and m[i-1][j] == 0 and maze[i-1][j] == '.':
                    m[i-1][j] = k + 1
                if j > 0 and m[i][j-1] == 0 and maze[i-1][j] == '.':
                    m[i][j-1] = k + 1
                if i < len(m) - 1 and m[i+1][j] == 0 and maze[i+1][j] == '.':
                    m[i+1][j] = k + 1
                if j < len(m[i]) -1 and m[i][j+1] == 0 and maze[i][j+1] == '.':
                    m[i][j+1] = k + 1

def solve_maze():
    startX = 1
    startY = 1
    endX = 11
    endY = 11

    for y in range(len(maze)):
        m.append([])
        for x in range(len(maze[y])):
            m[-1].append(0)
    m[startX][startY] = 1

    k = 0
    while m[endX][endY] == 0:
        k += 1
        make_step(k)

    k = m[endX][endY]
    i = endX
    j = endY
    path = [(i, j)]
    while k > 1:
        if i > 0 and m[i-1][j] == k - 1:
            i = i - 1
        elif j > 0 and m[i][j-1] == k - 1:
            j = j - 1
        elif i < len(m) - 1 and m[i+1][j] == k - 1:
            i = i + 1
        elif j < len(m[i]) - 1 and m[i][j+1] == k - 1:
            j = j + 1
        path.append((i, j))
        k -= 1
    print(path)

solve_maze()




